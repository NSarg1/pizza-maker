{"version":3,"sources":["assets/ingredients/olive.png","assets/pizza/olive.png","assets/ingredients/tomato.png","assets/pizza/tomato.png","assets/ingredients/greens.png","assets/pizza/greens.png","assets/ingredients/mashrooms.png","assets/pizza/mashrooms.png","assets/ingredients/sausage.png","assets/pizza/sausage.png","redux/ingredient/ingredient.types.js","redux/ingredient/ingredient.utils.js","redux/ingredient/data.js","redux/ingredient/ingredient.reducer.js","redux/rootReducer.js","redux/store.js","redux/ingredient/ingredient.selectors.js","react-dnd/ItemTypes.js","components/ingredient/Ingredient.component.jsx","components/cutting-board/CuttingBoard.component.jsx","redux/ingredient/ingredient.actions.js","components/pizza/Pizza.component.jsx","components/price-list/PriceList.component.jsx","pages/pizza-baker/PizzaBaker.page.jsx","App/App.js","index.js"],"names":["module","exports","IngredientTypes","ADD_INGREDIENT","CHANGE_BASE_SIZE","changeIngredientsCount","allIngredients","ingredient","map","ing","id","quantity","selectBaseSize","pizzaBases","selectedBase","elm","selected","pizzaIngredients","name","pieceImg","require","portionImg","weight","price","type","INITIAL_STATE","ingredients","baseSize","size","ingredientReducer","state","action","payload","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","selectIngredientsStore","selectIngredients","createSelector","selectSelectedBaseSize","baseSizes","find","ItemTypes","Ingredient","useDrag","item","collect","monitor","isDragging","drag","preview","DragPreviewImage","connect","src","ref","className","style","backgroundImage","opacity","mapStateToProps","createStructuredSelector","selectedBaseSize","dispatch","addIngredient","setPizzaBaseSize","base","useDrop","accept","drop","handleDrop","transform","classes","onClick","bind","toFixed","toUpperCase","reduce","acc","curr","alert","PizzaBaker","App","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.e21bac25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/olive.6c9efc12.png\";","module.exports = __webpack_public_path__ + \"static/media/olive.6915a1c3.png\";","module.exports = __webpack_public_path__ + \"static/media/tomato.513a9f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/tomato.6c56301b.png\";","module.exports = __webpack_public_path__ + \"static/media/greens.14e573da.png\";","module.exports = __webpack_public_path__ + \"static/media/greens.cd50be91.png\";","module.exports = __webpack_public_path__ + \"static/media/mashrooms.d6ff94b8.png\";","module.exports = __webpack_public_path__ + \"static/media/mashrooms.d327c447.png\";","module.exports = __webpack_public_path__ + \"static/media/sausage.dc174a6c.png\";","module.exports = __webpack_public_path__ + \"static/media/sausage.368cc2ac.png\";","const IngredientTypes = {\n    ADD_INGREDIENT: 'ADD_INGREDIENT',\n    CHANGE_BASE_SIZE: 'CHANGE_BASE_SIZE',\n};\n\nexport default IngredientTypes;\n","export const changeIngredientsCount = (allIngredients, ingredient) => {\r\n    return allIngredients.map((ing) => {\r\n        if (ing.id === ingredient.id) {\r\n            return { ...ing, quantity: ing.quantity + 1 };\r\n        } else {\r\n            return ing;\r\n        }\r\n    });\r\n};\r\n\r\nexport const selectBaseSize = (pizzaBases, selectedBase) => {\r\n    return pizzaBases.map((elm) => {\r\n        if (elm.id === selectedBase.id) {\r\n            return { ...elm, selected: true };\r\n        } else {\r\n            return { ...elm, selected: false };\r\n        }\r\n    });\r\n};\r\n","export const pizzaIngredients = [\r\n    {\r\n        id: 'ingredient-1',\r\n        name: 'olive',\r\n        pieceImg: require('../../assets/ingredients/olive.png'),\r\n        portionImg: require('../../assets/pizza/olive.png'),\r\n        weight: 0.1,\r\n        price: 0.3,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-2',\r\n        name: 'tomato',\r\n        pieceImg: require('../../assets/ingredients/tomato.png'),\r\n        portionImg: require('../../assets/pizza/tomato.png'),\r\n        weight: 0.3,\r\n        price: 0.2,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-3',\r\n        name: 'greens',\r\n        pieceImg: require('../../assets/ingredients/greens.png'),\r\n        portionImg: require('../../assets/pizza/greens.png'),\r\n        weight: 0.05,\r\n        price: 0.1,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-4',\r\n        name: 'mashrooms',\r\n        pieceImg: require('../../assets/ingredients/mashrooms.png'),\r\n        portionImg: require('../../assets/pizza/mashrooms.png'),\r\n        weight: 0.1,\r\n        price: 0.5,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-5',\r\n        name: 'sausage',\r\n        pieceImg: require('../../assets/ingredients/sausage.png'),\r\n        portionImg: require('../../assets/pizza/sausage.png'),\r\n        weight: 0.3,\r\n        price: 0.5,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n];\r\n\r\nexport const pizzaBaseSizes = [\r\n    { id: 'base-1', name: 'SMALL', size: 0.9, weight: 0.2, price: 1, type: 'base', selected: false },\r\n    { id: 'base-2', name: 'MEDIUM', size: 1, weight: 0.4, price: 2, type: 'base', selected: true },\r\n    { id: 'base-3', name: 'BIG', size: 1.1, weight: 0.6, price: 3, type: 'base', selected: false },\r\n];\r\n","import IngredientTypes from './ingredient.types';\nimport { changeIngredientsCount, selectBaseSize } from './ingredient.utils';\n\nimport { pizzaIngredients, pizzaBaseSizes } from './data';\n\nconst { ADD_INGREDIENT, CHANGE_BASE_SIZE } = IngredientTypes;\n\nconst INITIAL_STATE = {\n    ingredients: pizzaIngredients,\n    baseSize: pizzaBaseSizes,\n};\n\nconst ingredientReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: changeIngredientsCount(state.ingredients, action.payload),\n            };\n        case CHANGE_BASE_SIZE:\n            return {\n                ...state,\n                baseSize: selectBaseSize(state.baseSize, action.payload),\n            };\n        default:\n            return state;\n    }\n};\n\nexport default ingredientReducer;\n","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport ingredientReducer from './ingredient/ingredient.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['prevOrders'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    ingredients: ingredientReducer,\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore } from 'redux-persist';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middlewares = [];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistStore };\r\n","import { createSelector } from 'reselect';\n\nconst selectIngredientsStore = (state) => state.ingredients;\n\nexport const selectIngredients = createSelector(\n    [selectIngredientsStore],\n    (ingredients) => ingredients.ingredients\n);\n\nexport const selectBaseSize = createSelector([selectIngredientsStore], (ingredients) => ingredients.baseSize);\n\nexport const selectSelectedBaseSize = createSelector([selectBaseSize], (baseSizes) =>\n    baseSizes.find((elm) => elm.selected === true)\n);\n","export const ItemTypes = {\r\n    INGREDIENT: 'ingredient',\r\n};\r\n","import React from 'react';\r\nimport { useDrag, DragPreviewImage } from 'react-dnd';\r\n\r\nimport { ItemTypes } from '../../react-dnd/ItemTypes';\r\n\r\n\r\nconst Ingredient = ({ ingredient }) => {\r\n    const { pieceImg } = ingredient;\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: ItemTypes.INGREDIENT, ingredient },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <DragPreviewImage connect={preview} src={pieceImg} />\r\n            <div\r\n                ref={drag}\r\n                className=\"ingredient\"\r\n                style={{\r\n                    backgroundImage: `url(${pieceImg})`,\r\n                    opacity: isDragging ? 0.3 : 1,\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Ingredient;\r\n","// LIBRARIES\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectIngredients } from '../../redux/ingredient/ingredient.selectors';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\n//COMPONENTS\r\nimport Ingredient from '../ingredient/Ingredient.component';\r\n\r\nconst CuttingBoard = ({ ingredients }) => {\r\n    return (\r\n        <div className=\"cutting-board\">\r\n            {ingredients.map((ingredient) => (\r\n                <Ingredient key={ingredient.id} ingredient={ingredient} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    ingredients: selectIngredients,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CuttingBoard);\r\n","import IngredientTypes from './ingredient.types';\n\nconst { ADD_INGREDIENT, CHANGE_BASE_SIZE } = IngredientTypes;\n\nexport const addIngredient = (ingredient) => ({\n    type: ADD_INGREDIENT,\n    payload: ingredient,\n});\n\nexport const setPizzaBaseSize = (base) => ({\n    type: CHANGE_BASE_SIZE,\n    payload: base,\n});\n","// LIBRAARIES\r\nimport React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\n//SELECTORS\r\nimport {\r\n    selectIngredients,\r\n    selectBaseSize,\r\n    selectSelectedBaseSize,\r\n} from '../../redux/ingredient/ingredient.selectors';\r\nimport { ItemTypes } from '../../react-dnd/ItemTypes';\r\n\r\n//ACTIONS\r\nimport { addIngredient, setPizzaBaseSize } from '../../redux/ingredient/ingredient.actions';\r\n\r\nconst Pizza = ({ ingredients, baseSize, selectedBaseSize, addIngredient, setPizzaBaseSize }) => {\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.INGREDIENT,\r\n        drop: ({ ingredient }) => handleDrop(ingredient),\r\n    });\r\n\r\n    function handleDrop(ingredient) {\r\n        addIngredient(ingredient);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"pizza\"\r\n            ref={drop}\r\n            style={{\r\n                transform: `scale(${selectedBaseSize.size})`,\r\n            }}>\r\n            <div className=\"pizza__main\">\r\n                {ingredients.map((item) => {\r\n                    if (item.quantity && item.portionImg) {\r\n                        return (\r\n                            <div\r\n                                key={item.id}\r\n                                style={{ backgroundImage: `url(${item.portionImg})` }}\r\n                                className={`pizza__ingredient pizza__${item.name}`}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })}\r\n            </div>\r\n            <div className=\"pizza__size\">\r\n                {baseSize.map((base) => {\r\n                    const classes = base.selected\r\n                        ? 'pizza__size-box pizza__size-box--active'\r\n                        : 'pizza__size-box';\r\n\r\n                    return (\r\n                        <div key={base.id} className={classes} onClick={setPizzaBaseSize.bind(this, base)}>\r\n                            <span className=\"pizza__size-name\">{base.name}</span>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    ingredients: selectIngredients,\r\n    baseSize: selectBaseSize,\r\n    selectedBaseSize: selectSelectedBaseSize,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addIngredient: (ingredient) => dispatch(addIngredient(ingredient)),\r\n    setPizzaBaseSize: (base) => dispatch(setPizzaBaseSize(base)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pizza);\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectIngredients, selectSelectedBaseSize } from '../../redux/ingredient/ingredient.selectors';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nconst PriceList = ({ ingredients, selectedBaseSize }) => {\r\n    return (\r\n        <div className=\"price-list\">\r\n            <h2 className=\"price-list__title\">Price list</h2>\r\n\r\n            <ul className=\"price-list__content\">\r\n                <li className=\"price-list__item\">\r\n                    BASE: {selectedBaseSize.name} Size /{selectedBaseSize.weight.toFixed(2)}\r\n                    kg/\r\n                </li>\r\n                {ingredients.map((ing) => {\r\n                    return (\r\n                        <li key={ing.id} className=\"price-list__item\">\r\n                            {ing.name.toUpperCase()}: {ing.quantity}x Portion /\r\n                            {(ing.quantity * ing.weight).toFixed(2)}kg/\r\n                        </li>\r\n                    );\r\n                })}\r\n                <li className=\"price-list__total\">\r\n                    <span>\r\n                        <label>Total price:</label>\r\n                        {(\r\n                            ingredients.reduce((acc, curr) => acc + curr.price * curr.quantity, 0) +\r\n                            selectedBaseSize.price\r\n                        ).toFixed(2)}\r\n                        $\r\n                    </span>\r\n\r\n                    <button onClick={() => alert('You have ordered')}>Order</button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    ingredients: selectIngredients,\r\n    selectedBaseSize: selectSelectedBaseSize,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PriceList);\r\n","import React from 'react';\r\nimport CuttingBoard from '../../components/cutting-board/CuttingBoard.component';\r\nimport Pizza from '../../components/pizza/Pizza.component';\r\nimport PriceList from '../../components/price-list/PriceList.component';\r\n\r\nconst PizzaBaker = () => {\r\n    return (\r\n        <div className=\"pizza-baker\">\r\n            <h1 className=\"pizza-baker__title\">You make, we bake</h1>\r\n            <div className=\"pizza-baker__container\">\r\n                <div className=\"pizza-baker__main\">\r\n                    <Pizza />\r\n                    <CuttingBoard />\r\n                    <PriceList />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PizzaBaker;\r\n","import React from 'react';\r\nimport PizzaBaker from '../pages/pizza-baker/PizzaBaker.page';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <PizzaBaker />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './base.scss';\r\n/********LIBRARIES*******/\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//REACT DND\r\nimport { DndProvider } from 'react-dnd';\r\nimport Backend from 'react-dnd-html5-backend';\r\n\r\n// REDUX + PERSIST\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\n\r\n/********* COMPONENTS **********/\r\nimport App from './App/App';\r\n\r\nReactDOM.render(\r\n    <DndProvider backend={Backend}>\r\n        <Provider store={store}>\r\n            <PersistGate persistor={persistor}>\r\n                <App />\r\n            </PersistGate>\r\n        </Provider>\r\n    </DndProvider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}