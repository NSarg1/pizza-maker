{"version":3,"sources":["assets/ingredients/olive.png","assets/pizza/olive.png","assets/ingredients/tomato.png","assets/pizza/tomato.png","assets/ingredients/greens.png","assets/pizza/greens.png","assets/ingredients/mashrooms.png","assets/pizza/mashrooms.png","assets/ingredients/sausage.png","assets/pizza/sausage.png","redux/ingredient/ingredient.types.js","redux/ingredient/ingredient.utils.js","redux/ingredient/data.js","redux/ingredient/ingredient.reducer.js","redux/prev-orders/prev-orders.types.js","redux/prev-orders/prev-orders.reducer.js","redux/rootReducer.js","redux/store.js","redux/ingredient/ingredient.selectors.js","react-dnd/ItemTypes.js","components/ingredient/Ingredient.component.jsx","components/cutting-board/CuttingBoard.component.jsx","redux/ingredient/ingredient.actions.js","components/button/Button.component.jsx","components/adding-ingredient/AddingIngredient.component.jsx","components/pizza/Pizza.component.jsx","redux/prev-orders/prev-orders.actions.js","components/price-list/PriceList.component.jsx","pages/pizza-baker/PizzaBaker.page.jsx","redux/prev-orders/prev-orders.selectors.js","pages/ordered-pizzas/OrderedPizzas.page.jsx","layout/header/Header.layout.jsx","App/App.js","index.js"],"names":["module","exports","IngredientTypes","ADD_INGREDIENT","CHANGE_BASE_SIZE","RESET_BASE_AND_INGREDIENTS","changeIngredientsCount","allIngredients","ingredient","map","ing","id","quantity","selectBaseSize","pizzaBases","selectedBase","elm","selected","pizzaIngredients","name","pieceImg","require","portionImg","weight","price","type","pizzaBaseSizes","size","INITIAL_STATE","ingredients","baseSizes","ingredientReducer","state","action","payload","PrevOrdersTypes","SAVE_PIZZA_SAMPLE","CLEAR_PIZZA_HISTORY","orders","prevOrdersReducer","filter","persistConfig","key","storage","whitelist","rootReducer","combineReducers","prevOrders","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","selectIngredientsStore","selectIngredients","createSelector","selectSelectedBaseSize","find","selectTotalOrder","baseSize","ItemTypes","Ingredient","useDrag","item","collect","monitor","isDragging","drag","preview","DragPreviewImage","connect","src","ref","className","style","backgroundImage","opacity","mapStateToProps","createStructuredSelector","CustomButton","children","otherProps","AddingIngredient","setState","onAnimationEnd","selectedBaseSize","dispatch","addIngredient","setPizzaBaseSize","base","useState","useDrop","accept","drop","handleDrop","console","log","transform","classes","onClick","bind","clearPizzaHistory","totalOrder","savePizzaSample","pizza","resetAllIngredients","props","toFixed","toUpperCase","reduce","acc","curr","PizzaBaker","selectPrevOrders","handleOrderClick","alert","length","order","ind","history","push","App","component","Header","exact","path","OrderedPizzas","ReactDOM","render","DndProvider","backend","Backend","basename","document","getElementById"],"mappings":"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","file":"static/js/main.3506e517.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/olive.6c9efc12.png\";","module.exports = __webpack_public_path__ + \"static/media/olive.6915a1c3.png\";","module.exports = __webpack_public_path__ + \"static/media/tomato.513a9f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/tomato.6c56301b.png\";","module.exports = __webpack_public_path__ + \"static/media/greens.14e573da.png\";","module.exports = __webpack_public_path__ + \"static/media/greens.cd50be91.png\";","module.exports = __webpack_public_path__ + \"static/media/mashrooms.d6ff94b8.png\";","module.exports = __webpack_public_path__ + \"static/media/mashrooms.d327c447.png\";","module.exports = __webpack_public_path__ + \"static/media/sausage.dc174a6c.png\";","module.exports = __webpack_public_path__ + \"static/media/sausage.368cc2ac.png\";","const IngredientTypes = {\n    ADD_INGREDIENT: 'ADD_INGREDIENT',\n    CHANGE_BASE_SIZE: 'CHANGE_BASE_SIZE',\n    RESET_BASE_AND_INGREDIENTS: 'RESET_BASE_AND_INGREDIENTS',\n};\n\nexport default IngredientTypes;\n","export const changeIngredientsCount = (allIngredients, ingredient) => {\r\n    return allIngredients.map((ing) => {\r\n        if (ing.id === ingredient.id) {\r\n            return { ...ing, quantity: ing.quantity + 1 };\r\n        } else {\r\n            return ing;\r\n        }\r\n    });\r\n};\r\n\r\nexport const selectBaseSize = (pizzaBases, selectedBase) => {\r\n    return pizzaBases.map((elm) => {\r\n        if (elm.id === selectedBase.id) {\r\n            return { ...elm, selected: true };\r\n        } else {\r\n            return { ...elm, selected: false };\r\n        }\r\n    });\r\n};\r\n","export const pizzaIngredients = [\r\n    {\r\n        id: 'ingredient-1',\r\n        name: 'olive',\r\n        pieceImg: require('../../assets/ingredients/olive.png'),\r\n        portionImg: require('../../assets/pizza/olive.png'),\r\n        weight: 0.1,\r\n        price: 0.3,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-2',\r\n        name: 'tomato',\r\n        pieceImg: require('../../assets/ingredients/tomato.png'),\r\n        portionImg: require('../../assets/pizza/tomato.png'),\r\n        weight: 0.3,\r\n        price: 0.2,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-3',\r\n        name: 'greens',\r\n        pieceImg: require('../../assets/ingredients/greens.png'),\r\n        portionImg: require('../../assets/pizza/greens.png'),\r\n        weight: 0.05,\r\n        price: 0.1,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-4',\r\n        name: 'mashrooms',\r\n        pieceImg: require('../../assets/ingredients/mashrooms.png'),\r\n        portionImg: require('../../assets/pizza/mashrooms.png'),\r\n        weight: 0.1,\r\n        price: 0.5,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n    {\r\n        id: 'ingredient-5',\r\n        name: 'sausage',\r\n        pieceImg: require('../../assets/ingredients/sausage.png'),\r\n        portionImg: require('../../assets/pizza/sausage.png'),\r\n        weight: 0.3,\r\n        price: 0.5,\r\n        type: 'ingredient',\r\n        quantity: 0,\r\n    },\r\n];\r\n\r\nexport const pizzaBaseSizes = [\r\n    {\r\n        id: 'base-1',\r\n        name: 'SMALL',\r\n        size: 0.9,\r\n        weight: 0.2,\r\n        price: 1,\r\n        type: 'base',\r\n        selected: false,\r\n        quantity: 1,\r\n    },\r\n    {\r\n        id: 'base-2',\r\n        name: 'MEDIUM',\r\n        size: 1,\r\n        weight: 0.4,\r\n        price: 2,\r\n        type: 'base',\r\n        selected: true,\r\n        quantity: 1,\r\n    },\r\n    {\r\n        id: 'base-3',\r\n        name: 'BIG',\r\n        size: 1.1,\r\n        weight: 0.6,\r\n        price: 3,\r\n        type: 'base',\r\n        selected: false,\r\n        quantity: 1,\r\n    },\r\n];\r\n","import IngredientTypes from './ingredient.types';\nimport { changeIngredientsCount, selectBaseSize } from './ingredient.utils';\n\nimport { pizzaIngredients, pizzaBaseSizes } from './data';\n\nconst { ADD_INGREDIENT, CHANGE_BASE_SIZE , RESET_BASE_AND_INGREDIENTS} = IngredientTypes;\n\nconst INITIAL_STATE = {\n    ingredients: pizzaIngredients,\n    baseSizes: pizzaBaseSizes,\n};\n\nconst ingredientReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: changeIngredientsCount(state.ingredients, action.payload),\n            };\n        case CHANGE_BASE_SIZE:\n            return {\n                ...state,\n                baseSizes: selectBaseSize(state.baseSizes, action.payload),\n            };\n        case RESET_BASE_AND_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: pizzaIngredients,\n                baseSizes: pizzaBaseSizes,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default ingredientReducer;\n","const PrevOrdersTypes = {\n    SAVE_PIZZA_SAMPLE: 'SAVE_PIZZA_SAMPLE',\n    CLEAR_PIZZA_HISTORY: 'CLEAR_PIZZA_HISTORY',\n};\n\nexport default PrevOrdersTypes;\n","import PrevOrdersTypes from './prev-orders.types';\n\nconst { SAVE_PIZZA_SAMPLE, CLEAR_PIZZA_HISTORY } = PrevOrdersTypes;\n\nconst INITIAL_STATE = {\n    orders: [],\n};\n\nconst prevOrdersReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case SAVE_PIZZA_SAMPLE:\n            return {\n                ...state,\n                orders: [...state.orders, action.payload.filter((ing) => !!ing.quantity)],\n            };\n        case CLEAR_PIZZA_HISTORY:\n            return {\n                ...state,\n                orders: [],\n            };\n        default:\n            return state;\n    }\n};\n\nexport default prevOrdersReducer;\n","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport ingredientReducer from './ingredient/ingredient.reducer';\r\nimport prevOrdersReducer from './prev-orders/prev-orders.reducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['prevOrders'],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    ingredients: ingredientReducer,\r\n    prevOrders: prevOrdersReducer,\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { persistStore } from 'redux-persist';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middlewares = [];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default { store, persistStore };\r\n","import { createSelector } from 'reselect';\n\nconst selectIngredientsStore = (state) => state.ingredients;\n\nexport const selectIngredients = createSelector(\n    [selectIngredientsStore],\n    (ingredients) => ingredients.ingredients\n);\n\nexport const selectBaseSize = createSelector([selectIngredientsStore], (ingredients) => ingredients.baseSizes);\n\nexport const selectSelectedBaseSize = createSelector([selectBaseSize], (baseSizes) =>\n    baseSizes.find((elm) => elm.selected === true)\n);\n\nexport const selectTotalOrder = createSelector(\n    [selectIngredients, selectSelectedBaseSize],\n    (ingredients, baseSize) => [{ ...baseSize }, ...ingredients]\n);\n","export const ItemTypes = {\r\n    INGREDIENT: 'ingredient',\r\n};\r\n","import React from 'react';\r\nimport { useDrag, DragPreviewImage } from 'react-dnd';\r\n\r\nimport { ItemTypes } from '../../react-dnd/ItemTypes';\r\n\r\n\r\nconst Ingredient = ({ ingredient }) => {\r\n    const { pieceImg } = ingredient;\r\n\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: ItemTypes.INGREDIENT, ingredient },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <DragPreviewImage connect={preview} src={pieceImg} />\r\n            <div\r\n                ref={drag}\r\n                className=\"ingredient\"\r\n                style={{\r\n                    backgroundImage: `url(${pieceImg})`,\r\n                    opacity: isDragging ? 0.3 : 1,\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Ingredient;\r\n","// LIBRARIES\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectIngredients } from '../../redux/ingredient/ingredient.selectors';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\n//COMPONENTS\r\nimport Ingredient from '../ingredient/Ingredient.component';\r\n\r\nconst CuttingBoard = ({ ingredients }) => {\r\n    return (\r\n        <div className=\"cutting-board\">\r\n            {ingredients.map((ingredient) => (\r\n                <Ingredient key={ingredient.id} ingredient={ingredient} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    ingredients: selectIngredients,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CuttingBoard);\r\n","import IngredientTypes from './ingredient.types';\n\nconst { ADD_INGREDIENT, CHANGE_BASE_SIZE, RESET_BASE_AND_INGREDIENTS } = IngredientTypes;\n\nexport const addIngredient = (ingredient) => ({\n    type: ADD_INGREDIENT,\n    payload: ingredient,\n});\n\nexport const setPizzaBaseSize = (base) => ({\n    type: CHANGE_BASE_SIZE,\n    payload: base,\n});\n\nexport const resetAllIngredients = () => ({\n    type: RESET_BASE_AND_INGREDIENTS,\n});\n","import React from 'react';\r\n\r\nconst CustomButton = ({ className, children, ...otherProps }) => {\r\n    return (\r\n        <button {...otherProps} className={className ? `ns-btn ${className}` : 'ns-btn'}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from 'react';\r\n\r\nconst AddingIngredient = ({ state, setState }) => {\r\n    if (state) {\r\n        return (\r\n            <div\r\n                className=\"adding-ingredient\"\r\n                style={{ backgroundImage: `url(${state.pieceImg})` }}\r\n                onAnimationEnd={() => setState(null)}\r\n            />\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default AddingIngredient;\r\n","// LIBRAARIES\r\nimport React, { useState } from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\n//SELECTORS\r\nimport {\r\n    selectIngredients,\r\n    selectBaseSize,\r\n    selectSelectedBaseSize,\r\n} from '../../redux/ingredient/ingredient.selectors';\r\nimport { ItemTypes } from '../../react-dnd/ItemTypes';\r\n\r\n//ACTIONS\r\nimport { addIngredient, setPizzaBaseSize } from '../../redux/ingredient/ingredient.actions';\r\n\r\n//COMPONENTS\r\nimport Button from '../button/Button.component';\r\nimport AddingIngredient from '../adding-ingredient/AddingIngredient.component';\r\n\r\nconst Pizza = ({ ingredients, baseSize, selectedBaseSize, addIngredient, setPizzaBaseSize }) => {\r\n    const [state, setState] = useState();\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.INGREDIENT,\r\n        drop: ({ ingredient }) => handleDrop(ingredient),\r\n    });\r\n\r\n    function handleDrop(ingredient) {\r\n        setState(ingredient);\r\n        addIngredient(ingredient);\r\n    }\r\n\r\n    console.log(state);\r\n    return (\r\n        <div className=\"pizza\" ref={drop} style={{ transform: `scale(${selectedBaseSize.size})` }}>\r\n            <AddingIngredient state={state} setState={setState} />\r\n            <div className=\"pizza__main\">\r\n                {ingredients.map((item) => {\r\n                    if (item.quantity && item.portionImg) {\r\n                        return (\r\n                            <div\r\n                                key={item.id}\r\n                                style={{ backgroundImage: `url(${item.portionImg})` }}\r\n                                className={`pizza__ingredient pizza__${item.name}`}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })}\r\n            </div>\r\n            <div className=\"pizza__size\">\r\n                {baseSize.map((base) => {\r\n                    const classes = base.selected ? 'ns-btn-pizza ns-btn-pizza--active' : 'ns-btn-pizza';\r\n\r\n                    return (\r\n                        <Button key={base.id} className={classes} onClick={setPizzaBaseSize.bind(this, base)}>\r\n                            <span className=\"pizza__btn-text\">{base.name}</span>\r\n                        </Button>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    ingredients: selectIngredients,\r\n    baseSize: selectBaseSize,\r\n    selectedBaseSize: selectSelectedBaseSize,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addIngredient: (ingredient) => dispatch(addIngredient(ingredient)),\r\n    setPizzaBaseSize: (base) => dispatch(setPizzaBaseSize(base)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pizza);\r\n","import PrevOrdersTypes from './prev-orders.types';\n\nconst { SAVE_PIZZA_SAMPLE, CLEAR_PIZZA_HISTORY } = PrevOrdersTypes;\n\nexport const savePizzaSample = (pizza) => ({\n    type: SAVE_PIZZA_SAMPLE,\n    payload: pizza,\n});\n\nexport const clearPizzaHistory = () => ({\n    type: CLEAR_PIZZA_HISTORY,\n});\n","import React from 'react';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    selectIngredients,\r\n    selectSelectedBaseSize,\r\n    selectTotalOrder,\r\n} from '../../redux/ingredient/ingredient.selectors';\r\n\r\nimport { savePizzaSample, clearPizzaHistory } from '../../redux/prev-orders/prev-orders.actions';\r\nimport { resetAllIngredients } from '../../redux/ingredient/ingredient.actions';\r\n\r\nimport Button from '../button/Button.component';\r\n\r\nconst PriceList = (props) => {\r\n    const { ingredients, selectedBaseSize, totalOrder, savePizzaSample, resetAllIngredients } = props;\r\n\r\n    console.log(totalOrder);\r\n    const handleOrderClick = () => {\r\n        savePizzaSample(totalOrder);\r\n        resetAllIngredients();\r\n    };\r\n\r\n    return (\r\n        <div className=\"price-list\">\r\n            <h2 className=\"price-list__title\">Price list</h2>\r\n\r\n            <ul className=\"price-list__content\">\r\n                <li className=\"price-list__item\">\r\n                    BASE: <span>{selectedBaseSize.name} </span> Size /{selectedBaseSize.weight.toFixed(2)}\r\n                    kg/\r\n                </li>\r\n                {ingredients.map((ing) => {\r\n                    return (\r\n                        <li key={ing.id} className=\"price-list__item\">\r\n                            {ing.name.toUpperCase()}: <span> {ing.quantity}</span>x Portion /\r\n                            {(ing.quantity * ing.weight).toFixed(2)}kg/\r\n                        </li>\r\n                    );\r\n                })}\r\n                <li className=\"price-list__total\">\r\n                    <div>\r\n                        <span>Total price: </span>\r\n                        <span>\r\n                            {(\r\n                                ingredients.reduce((acc, curr) => acc + curr.price * curr.quantity, 0) +\r\n                                selectedBaseSize.price\r\n                            ).toFixed(2)}\r\n                            $\r\n                        </span>\r\n                    </div>\r\n\r\n                    <Button className=\"ns-btn--order-submit\" onClick={handleOrderClick}>\r\n                        Submit order\r\n                    </Button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    ingredients: selectIngredients,\r\n    selectedBaseSize: selectSelectedBaseSize,\r\n    totalOrder: selectTotalOrder,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    savePizzaSample: (pizza) => dispatch(savePizzaSample(pizza)),\r\n    clearPizzaHistory: () => dispatch(clearPizzaHistory()),\r\n    resetAllIngredients: () => dispatch(resetAllIngredients()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PriceList);\r\n","import React from 'react';\r\nimport CuttingBoard from '../../components/cutting-board/CuttingBoard.component';\r\nimport Pizza from '../../components/pizza/Pizza.component';\r\nimport PriceList from '../../components/price-list/PriceList.component';\r\n\r\nconst PizzaBaker = () => {\r\n    return (\r\n        <div className=\"pizza-baker\">\r\n            {/* <h1 className=\"pizza-baker__title\">You make, we bake</h1> */}\r\n            <div className=\"pizza-baker__container\">\r\n                <div className=\"pizza-baker__main\">\r\n                    <Pizza />\r\n                    <CuttingBoard />\r\n                    <PriceList />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PizzaBaker;\r\n","import { createSelector } from 'reselect';\n\nconst selectPrevOrdersState = (state) => state.prevOrders;\n\nexport const selectPrevOrders = createSelector([selectPrevOrdersState], (state) => state.orders);\n","import React from 'react';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectPrevOrders } from '../../redux/prev-orders/prev-orders.selectors';\r\n\r\nimport { clearPizzaHistory } from '../../redux/prev-orders/prev-orders.actions';\r\n\r\nimport Button from '../../components/button/Button.component';\r\n\r\nconst OrderedPizzas = ({ prevOrders, clearPizzaHistory }) => {\r\n    console.log(prevOrders);\r\n\r\n    const handleOrderClick = () => {\r\n        alert('You have ordered succesfully. Bon apety.');\r\n    };\r\n\r\n    return (\r\n        <div className=\"ordered-pizzas\">\r\n            {prevOrders.length ? (\r\n                <>\r\n                    <div className=\"ordered-pizzas__top\">\r\n                        <Button className=\"ns-btn-pizza\" onClick={clearPizzaHistory}>\r\n                            <span className=\"pizza__btn-text\">Clear history</span>\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"ordered-pizzas__bottom\">\r\n                        {prevOrders.map((order, ind) => {\r\n                            return (\r\n                                <div key={ind} className=\"ordered-pizzas__collection\">\r\n                                    <div>\r\n                                        {order.map((ing) => {\r\n                                            return ing.type === 'base' ? (\r\n                                                <div>\r\n                                                    <div key={ing.id} className=\"ordered-pizzas__item-title\">\r\n                                                        <span>BASE: {ing.name}</span>\r\n                                                    </div>\r\n                                                    <div className=\"u-flex-center\">INGREDIENTS</div>\r\n                                                </div>\r\n                                            ) : (\r\n                                                <div key={ing.id} className=\"ordered-pizzas__item\">\r\n                                                    <span>\r\n                                                        {ing.name.toUpperCase()}: x{ing.quantity}\r\n                                                    </span>\r\n                                                </div>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"order-again\">\r\n                                        <Button className=\"order-again__btn\" onClick={handleOrderClick}>\r\n                                            ORDER AGAIN\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <div className=\"ordered-pizzas__empty-message\">You haven't any orders yet</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    prevOrders: selectPrevOrders,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    clearPizzaHistory: () => dispatch(clearPizzaHistory()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderedPizzas);\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectPrevOrders } from '../../redux/prev-orders/prev-orders.selectors';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nconst Header = ({ orders, history }) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header__logo\" onClick={() => history.push('/')} />\r\n            <div\r\n                className={!orders.length ? 'header__plate' : 'header__plate header__plate--full'}\r\n                onClick={() => history.push('/ordered-pizzas')}\r\n            />\r\n        </header>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    orders: selectPrevOrders,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from 'react';\r\n\r\n//PAGES\r\nimport PizzaBaker from '../pages/pizza-baker/PizzaBaker.page';\r\nimport OrderedPizzas from '../pages/ordered-pizzas/OrderedPizzas.page'\r\n//LAYOUT\r\nimport Header from '../layout/header/Header.layout';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Route component={Header} />\r\n            <main className=\"main\">\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={PizzaBaker} />\r\n                    <Route exact path=\"/ordered-pizzas\" component={OrderedPizzas} />\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import './index.scss';\r\n/********LIBRARIES*******/\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\r\n//REACT DND\r\nimport { DndProvider } from 'react-dnd';\r\nimport Backend from 'react-dnd-html5-backend';\r\n\r\n// REDUX + PERSIST\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\n\r\n/********* COMPONENTS **********/\r\nimport App from './App/App';\r\n\r\nReactDOM.render(\r\n    <DndProvider backend={Backend}>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <PersistGate persistor={persistor}>\r\n                    <HashRouter basename=\"/\">\r\n                        <App />\r\n                    </HashRouter>\r\n                </PersistGate>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </DndProvider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}